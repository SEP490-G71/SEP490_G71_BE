package vn.edu.fpt.medicaldiagnosis.service.impl;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import vn.edu.fpt.medicaldiagnosis.dto.request.StaffFeedbackRequest;
import vn.edu.fpt.medicaldiagnosis.dto.response.PagedResponse;
import vn.edu.fpt.medicaldiagnosis.dto.response.StaffFeedbackItemResponse;
import vn.edu.fpt.medicaldiagnosis.dto.response.StaffFeedbackResponse;
import vn.edu.fpt.medicaldiagnosis.dto.response.StaffFeedbackStatisticResponse;
import vn.edu.fpt.medicaldiagnosis.entity.MedicalRecord;
import vn.edu.fpt.medicaldiagnosis.entity.Patient;
import vn.edu.fpt.medicaldiagnosis.entity.Staff;
import vn.edu.fpt.medicaldiagnosis.entity.StaffFeedback;
import vn.edu.fpt.medicaldiagnosis.exception.AppException;
import vn.edu.fpt.medicaldiagnosis.exception.ErrorCode;
import vn.edu.fpt.medicaldiagnosis.mapper.DepartmentMapper;
import vn.edu.fpt.medicaldiagnosis.mapper.StaffMapper;
import vn.edu.fpt.medicaldiagnosis.repository.MedicalRecordRepository;
import vn.edu.fpt.medicaldiagnosis.repository.PatientRepository;
import vn.edu.fpt.medicaldiagnosis.repository.StaffFeedbackRepository;
import vn.edu.fpt.medicaldiagnosis.repository.StaffRepository;
import vn.edu.fpt.medicaldiagnosis.service.StaffFeedbackService;
import vn.edu.fpt.medicaldiagnosis.specification.StaffSpecification;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class StaffFeedbackServiceImpl implements StaffFeedbackService {
    StaffFeedbackRepository repository;
    StaffRepository staffRepository;
    PatientRepository patientRepository;
    MedicalRecordRepository medicalRecordRepository;
    StaffMapper staffMapper;
    @Override
    public StaffFeedbackResponse create(StaffFeedbackRequest request) {
        log.info("Creating staff feedback: {}", request);
        Staff doctor = staffRepository.findByIdAndDeletedAtIsNull(request.getDoctorId())
                .orElseThrow(() -> new AppException(ErrorCode.STAFF_NOT_FOUND, "Doctor with ID " + request.getDoctorId() + " not found"));

        Patient patient = patientRepository.findByIdAndDeletedAtIsNull(request.getPatientId())
                .orElseThrow(() -> new AppException(ErrorCode.PATIENT_NOT_FOUND, "Patient with ID " + request.getPatientId() + " not found"));

        MedicalRecord record = medicalRecordRepository.findByIdAndDeletedAtIsNull(request.getMedicalRecordId())
                .orElseThrow(() -> new AppException(ErrorCode.MEDICAL_RECORD_NOT_FOUND, "Medical record with ID " + request.getMedicalRecordId() + " not found"));

        StaffFeedback feedback = StaffFeedback.builder()
                .doctor(doctor)
                .patient(patient)
                .medicalRecord(record)
                .satisfactionLevel(request.getSatisfactionLevel())
                .comment(request.getComment())
                .build();

        return mapToResponse(repository.save(feedback));
    }

    @Override
    public StaffFeedbackResponse update(String id, StaffFeedbackRequest request) {
        StaffFeedback feedback = repository.findByIdAndDeletedAtIsNull(id)
                .orElseThrow(() -> new AppException(ErrorCode.FEEDBACK_NOT_FOUND, "Feedback with ID " + id + " not found"));

        Staff doctor = staffRepository.findByIdAndDeletedAtIsNull(request.getDoctorId())
                .orElseThrow(() -> new AppException(ErrorCode.STAFF_NOT_FOUND, "Doctor with ID " + request.getDoctorId() + " not found"));

        Patient patient = patientRepository.findByIdAndDeletedAtIsNull(request.getPatientId())
                .orElseThrow(() -> new AppException(ErrorCode.PATIENT_NOT_FOUND, "Patient with ID " + request.getPatientId() + " not found"));

        MedicalRecord record = medicalRecordRepository.findByIdAndDeletedAtIsNull(request.getMedicalRecordId())
                .orElseThrow(() -> new AppException(ErrorCode.MEDICAL_RECORD_NOT_FOUND, "Medical record with ID " + request.getMedicalRecordId() + " not found"));

        feedback.setDoctor(doctor);
        feedback.setPatient(patient);
        feedback.setMedicalRecord(record);
        feedback.setSatisfactionLevel(request.getSatisfactionLevel());
        feedback.setComment(request.getComment());

        return mapToResponse(repository.save(feedback));
    }

    @Override
    public List<StaffFeedbackResponse> findAll() {
        return repository.findAllByDeletedAtIsNull().stream()
                .map(this::mapToResponse)
                .toList();
    }

    @Override
    public StaffFeedbackResponse findById(String id) {
        return repository.findByIdAndDeletedAtIsNull(id)
                .map(this::mapToResponse)
                .orElseThrow(() -> new AppException(ErrorCode.FEEDBACK_NOT_FOUND, "Feedback with ID " + id + " not found"));
    }

    @Override
    public void delete(String id) {
        StaffFeedback feedback = repository.findByIdAndDeletedAtIsNull(id)
                .orElseThrow(() -> new AppException(ErrorCode.FEEDBACK_NOT_FOUND, "Feedback with ID " + id + " not found"));
        repository.delete(feedback);
    }

    @Override
    public List<StaffFeedbackResponse> findByMedicalRecordId(String medicalRecordId) {
        List<StaffFeedback> feedbacks = repository
                .findAllByMedicalRecordIdAndDeletedAtIsNull(medicalRecordId);

        return feedbacks.stream()
                .map(this::mapToResponse) // hoặc dùng mapper nếu có
                .toList();
    }

    @Override
    public StaffFeedbackStatisticResponse getStaffFeedbackStatistics(Map<String, String> filters, int page, int size, String sortBy, String sortDir) {
        Specification<Staff> spec = StaffSpecification.buildSpecification(filters);
        Sort sort = sortDir.equalsIgnoreCase("asc") ? Sort.by(sortBy).ascending() : Sort.by(sortBy).descending();
        Pageable pageable = PageRequest.of(page, size, sort);

        Page<Staff> pagedStaffs = staffRepository.findAll(spec, pageable);

        List<StaffFeedback> allFeedbacks = repository.findAll();

        Set<String> filteredStaffIds = pagedStaffs.stream().map(Staff::getId).collect(Collectors.toSet());
        List<StaffFeedback> relevantFeedbacks = allFeedbacks.stream()
                .filter(f -> filteredStaffIds.contains(f.getDoctor().getId()))
                .toList();

        Map<String, List<StaffFeedback>> feedbackByStaff = relevantFeedbacks.stream()
                .collect(Collectors.groupingBy(f -> f.getDoctor().getId()));

        List<StaffFeedbackItemResponse> feedbackResponses = pagedStaffs.stream()
                .map(staff -> {
                    List<StaffFeedback> feedbacks = feedbackByStaff.getOrDefault(staff.getId(), List.of());
                    long count = feedbacks.size();
                    BigDecimal avg = count == 0 ? BigDecimal.ZERO : BigDecimal.valueOf(
                            feedbacks.stream().mapToInt(f -> f.getSatisfactionLevel().getValue()).average().orElse(0)
                    ).setScale(2, RoundingMode.HALF_UP);

                    return StaffFeedbackItemResponse.builder()
                            .id(staff.getId())
                            .staffCode(staff.getStaffCode())
                            .fullName(staff.getFullName())
                            .phone(staff.getPhone())
                            .email(staff.getEmail())
                            .gender(staff.getGender())
                            .department(staffMapper.toStaffResponse(staff).getDepartment())
                            .totalFeedbacks(count)
                            .averageSatisfaction(avg)
                            .build();
                }).toList();

        long totalFeedbacks = allFeedbacks.size();

        BigDecimal avgSatisfaction = totalFeedbacks == 0 ? BigDecimal.ZERO :
                BigDecimal.valueOf(allFeedbacks.stream()
                        .mapToInt(f -> f.getSatisfactionLevel().getValue())
                        .average()
                        .orElse(0)).setScale(2, RoundingMode.HALF_UP);

        return StaffFeedbackStatisticResponse.builder()
                .data(new PagedResponse<>(feedbackResponses, page, size, pagedStaffs.getTotalElements(), pagedStaffs.getTotalPages(), pagedStaffs.isLast()))
                .totalFeedbacks(totalFeedbacks)
                .averageSatisfaction(avgSatisfaction)
                .build();
    }

    @Override
    public List<StaffFeedbackResponse> findByStaffId(String staffId) {
        List<StaffFeedback> feedbacks = repository.findByDoctor_IdAndDeletedAtIsNull(staffId);
        return feedbacks.stream()
                .map(this::mapToResponse)
                .toList();
    }

    private StaffFeedbackResponse mapToResponse(StaffFeedback feedback) {
        return StaffFeedbackResponse.builder()
                .id(feedback.getId())
                .doctorId(feedback.getDoctor().getId())
                .doctorName(feedback.getDoctor().getFullName()) // assuming getFullName exists
                .patientId(feedback.getPatient().getId())
                .patientName(feedback.getPatient().getFullName()) // assuming getFullName exists
                .medicalRecordId(feedback.getMedicalRecord().getId())
                .satisfactionLevel(feedback.getSatisfactionLevel())
                .comment(feedback.getComment())
                .createdAt(feedback.getCreatedAt())
                .build();
    }
}
