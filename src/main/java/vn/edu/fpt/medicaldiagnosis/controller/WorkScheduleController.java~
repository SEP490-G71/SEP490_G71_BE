package vn.edu.fpt.medicaldiagnosis.controller;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;
import vn.edu.fpt.medicaldiagnosis.dto.request.WorkScheduleRecurringRequest;
import vn.edu.fpt.medicaldiagnosis.dto.response.*;
import vn.edu.fpt.medicaldiagnosis.service.WorkScheduleService;

import java.util.List;
import java.util.Map;

import static lombok.AccessLevel.PRIVATE;

@RestController
@RequestMapping("/work-schedule")
@Slf4j
@RequiredArgsConstructor
@FieldDefaults(level = PRIVATE, makeFinal = true)
public class WorkScheduleController {
    WorkScheduleService workScheduleService;

    @PostMapping
    public ApiResponse<WorkScheduleRecurringResponse> createRecurringSchedules(
            @RequestBody @Valid WorkScheduleRecurringRequest request
    ) {
        log.info("Controller: create recurring schedules - {}", request);

        WorkScheduleRecurringResponse result = workScheduleService.createRecurringSchedules(request);

        return ApiResponse.<WorkScheduleRecurringResponse>builder()
                .result(result)
                .build();
    }

    @PostMapping("/check-in/{id}")
    public ApiResponse<WorkScheduleCreateResponse> checkIn(@PathVariable("id") String id) {
        log.info("Controller: check-in work schedule {}", id);
        WorkScheduleCreateResponse result = workScheduleService.checkIn(id);
        return ApiResponse.<WorkScheduleCreateResponse>builder()
                .result(result)
                .build();
    }

    @GetMapping("/staff/{staffId}")
    public ApiResponse<List<WorkScheduleDetailResponse>> getAllSchedulesByStaff(
            @PathVariable String staffId
    ) {
        log.info("Get all schedules for staff: {}", staffId);
        List<WorkScheduleDetailResponse> result = workScheduleService.getAllSchedulesByStaffId(staffId);
        return ApiResponse.<List<WorkScheduleDetailResponse>>builder()
                .result(result)
                .build();
    }

    @GetMapping("")
    public ApiResponse<PagedResponse<WorkScheduleRecurringResponse>> getRecurringSchedules(
            @RequestParam Map<String, String> filters,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "shiftDate") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir) {
        log.info("Controller: get recurring schedules with filters={}, page={}, size={}, sortBy={}, sortDir={}", filters, page, size, sortBy, sortDir);
        Page<WorkScheduleRecurringResponse> result =
                workScheduleService.getRecurringSchedulesPaged(filters, page, size, sortBy, sortDir);

        PagedResponse<WorkScheduleRecurringResponse> response = new PagedResponse<>(
                result.getContent(),
                result.getNumber(),
                result.getSize(),
                result.getTotalElements(),
                result.getTotalPages(),
                result.isLast()
        );

        return ApiResponse.<PagedResponse<WorkScheduleRecurringResponse>>builder().result(response).build();
    }

    @GetMapping("/{id}")
    public ApiResponse<WorkScheduleRecurringResponse> getRecurringScheduleDetailById(@PathVariable String id) {
        log.info("Controller: get recurring schedule detail by id={}", id);
        WorkScheduleRecurringResponse result = workScheduleService.getRecurringScheduleDetailById(id);
        return ApiResponse.<WorkScheduleRecurringResponse>builder()
                .result(result)
                .build();
    }

}
